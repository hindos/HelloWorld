apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: '2021-03-23T10:46:13Z'
  generation: 3
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          .: {}
          'f:params': {}
          'f:results': {}
          'f:stepTemplate':
            .: {}
            'f:name': {}
            'f:resources': {}
            'f:volumeMounts': {}
          'f:steps': {}
          'f:volumes': {}
      manager: Mozilla
      operation: Update
      time: '2021-03-23T20:17:55Z'
  name: generic-setup
  namespace: henda
  resourceVersion: '6943774'
  selfLink: /apis/tekton.dev/v1beta1/namespaces/henda/tasks/generic-setup
  uid: 474b4d73-5956-49b1-9356-896ae8cb5b27
spec:
  params:
    - name: environment
      type: string
    - name: git-url
      type: string
    - name: app-namespace
      type: string
    - default: master
      name: git-revision
      type: string
    - default: /source
      name: source-dir
      type: string
    - default: ''
      name: image-name
      type: string
    - default: ''
      name: image-tag
      type: string
    - default: docker.io
      name: registry-location
      type: string
    - default: hindos
      name: registry-namespace
      type: string
    - default: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
      name: tools-image
      type: string
  results:
    - description: ''
      name: api-server
    - description: ''
      name: git-url
    - description: ''
      name: git-revision
    - description: ''
      name: source-dir
    - description: ''
      name: app-namespace
    - description: ''
      name: image-name
    - description: ''
      name: image-tag
    - description: ''
      name: tools-image
    - description: ''
      name: registry-location
    - description: ''
      name: registry-namespace
  stepTemplate:
    name: ''
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - env:
        - name: ENVIRONMENTS
          valueFrom:
            configMapKeyRef:
              key: environments.json
              name: environments
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ibm-git-credentials
              optional: false
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ibm-git-credentials
              optional: false
      image: $(params.tools-image)
      name: git-clone
      resources: {}
      script: >
        set +x

        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            git clone $(params.git-url) $(params.source-dir)
        fi

        cd $(params.source-dir)

        git checkout $(params.git-revision)


        # Results

        # Defaults

        echo -n "$(params.git-url)">$(results.git-url.path)

        echo -n "$(git rev-parse --verify HEAD)">$(results.git-revision.path)

        echo -n "$(params.source-dir)">$(results.source-dir.path)

        echo -n "$(params.app-namespace)">$(results.app-namespace.path)

        echo -n "$(params.tools-image)">$(results.tools-image.path)

        echo -n
        "$(params.registry-namespace)">$(results.registry-namespace.path)

        echo -n "$(params.registry-location)">$(results.registry-location.path)


        # get the API Server

        echo "Finding the API SERVER"


        if [[ -z ${ENVIRONMENTS} ]];

        then
          echo "No deployment environments found in environments config map!"
          exit 1
        else
           echo "${ENVIRONMENTS}"
           ENV=`echo $(params.environment) | sed 's/ *$//g'` 

           if [[ ${ENV} == "build-only"]];
           then
              echo "Building only, no environment selected."
           else
              APISERVER=`echo ${ENVIRONMENTS} | jq -r '."'${ENV}'"'`
              echo "Will deploy to ${ENV}:${APISERVER}"
              echo -n ${ENVIRONMENTS} | jq -r '."'${ENV}'"'>$(results.api-server.path)
           fi
        fi


        # Assume short git commit revision

        REGISTRY_TAG="$(git rev-parse --verify HEAD --short)"

        echo -n "${REGISTRY_TAG}">$(results.image-tag.path)


        if [[ -z "$(params.app-namespace)" ]]; then
          # Assume current namespace
          echo -n "${NAMESPACE}">$(results.app-namespace.path)
        fi


        IMAGE_NAME="$(basename $(echo -n $(git config --get remote.origin.url))
        .git | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')"

        echo -n "${IMAGE_NAME}">$(results.image-name.path)


        for f in /tekton/results/*; do echo "results.$(basename $f)=$(cat $f)";
        done
  volumes:
    - emptyDir: {}
      name: source
