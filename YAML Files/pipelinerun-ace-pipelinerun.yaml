apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: ace-pipelinerun-
  selfLink: /apis/tekton.dev/v1beta1/namespaces/henda/pipelineruns/ace-pipelinerun-j9pct
  resourceVersion: '36634224'
  name: ace-pipelinerun-j9pct
  uid: 30225634-451f-4aec-ae7f-1f4c79ae17ec
  creationTimestamp: '2021-04-19T22:18:17Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:generateName': {}
        'f:spec':
          .: {}
          'f:params': {}
          'f:pipelineRef':
            .: {}
            'f:name': {}
          'f:serviceAccountName': {}
          'f:timeout': {}
      manager: oc
      operation: Update
      time: '2021-04-19T22:18:17Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:labels':
            .: {}
            'f:tekton.dev/pipeline': {}
        'f:status':
          .: {}
          'f:completionTime': {}
          'f:conditions': {}
          'f:pipelineSpec':
            .: {}
            'f:params': {}
            'f:tasks': {}
          'f:startTime': {}
          'f:taskRuns':
            .: {}
            'f:ace-pipelinerun-j9pct-build-585bj':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
            'f:ace-pipelinerun-j9pct-deploy-w2m84':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
            'f:ace-pipelinerun-j9pct-setup-n42s7':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskResults': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:results': {}
                  'f:stepTemplate':
                    .: {}
                    'f:name': {}
                    'f:resources': {}
                    'f:volumeMounts': {}
                  'f:steps': {}
                  'f:volumes': {}
      manager: openshift-pipelines-controller
      operation: Update
      time: '2021-04-19T22:20:43Z'
  namespace: henda
  labels:
    tekton.dev/pipeline: new-ace-pipeline
spec:
  params:
    - name: app-name
      value: hello-world
    - name: git-url
      value: 'https://github.com/hindos/ACE.git'
    - name: git-revision
      value: master
    - name: app-namespace
      value: henda
    - name: configurations
      value: hello-world-server-conf
    - name: private-lan-id
      value: ''
    - name: private-ip
      value: ''
    - name: min-cpu
      value: 125m
    - name: max-cpu
      value: 1000m
    - name: min-memory
      value: 512Mi
    - name: max-memory
      value: 2048Mi
    - name: environment
      value: dev
  pipelineRef:
    name: new-ace-pipeline
  serviceAccountName: pipeline
  timeout: 1h0m0s
status:
  completionTime: '2021-04-19T22:20:43Z'
  conditions:
    - lastTransitionTime: '2021-04-19T22:20:43Z'
      message: 'Tasks Completed: 3 (Failed: 0, Cancelled 0), Skipped: 0'
      reason: Succeeded
      status: 'True'
      type: Succeeded
  pipelineSpec:
    params:
      - default: ''
        description: The url for the git repository
        name: git-url
        type: string
      - default: master
        description: 'The git revision (branch, tag, or sha) that should be built'
        name: git-revision
        type: string
      - default: integrationserver
        description: The integration server deployment name
        name: app-name
        type: string
      - default: default
        name: app-namespace
        type: string
      - default: ' '
        description: IntegrationServer configurations list (comma separated)
        name: configurations
        type: string
      - default: 250m
        description: Minimum CPU request
        name: min-cpu
        type: string
      - default: 500m
        description: Maximum CPU request
        name: max-cpu
        type: string
      - default: 256Mi
        description: Minimum memory request
        name: min-memory
        type: string
      - default: 512Mi
        description: Maximum memory request
        name: max-memory
        type: string
      - default: ''
        description: Dedicated worker node label
        name: worker-node
        type: string
      - default: ''
        description: Adds a new service selector label
        name: match-selector
        type: string
      - default: ''
        description: Private LAN ID of OpenShift Cluster
        name: private-lan-id
        type: string
      - default: ''
        description: Private IP Address of Service
        name: private-ip
        type: string
      - default: '1'
        description: Number of replicas to run
        name: replicas
        type: string
      - default: dev
        description: Deployment environment
        name: environment
        type: string
      - default: 'false'
        description: true if other images will reference this image
        name: master-image
        type: string
    tasks:
      - name: setup
        params:
          - name: git-url
            value: $(params.git-url)
          - name: git-revision
            value: $(params.git-revision)
          - name: app-namespace
            value: $(params.app-namespace)
          - name: environment
            value: $(params.environment)
        taskRef:
          kind: Task
          name: generic-setup
      - name: build
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: tools-image
            value: $(tasks.setup.results.tools-image)
          - name: image-name
            value: $(tasks.setup.results.image-name)
          - name: image-tag
            value: $(tasks.setup.results.image-tag)
          - name: registry-location
            value: $(tasks.setup.results.registry-location)
          - name: registry-namespace
            value: $(tasks.setup.results.registry-namespace)
          - name: master-image
            value: $(params.master-image)
        runAfter:
          - setup
        taskRef:
          kind: Task
          name: generic-build
      - name: deploy
        params:
          - name: git-url
            value: $(tasks.setup.results.git-url)
          - name: git-revision
            value: $(tasks.setup.results.git-revision)
          - name: source-dir
            value: $(tasks.setup.results.source-dir)
          - name: image-name
            value: $(tasks.setup.results.image-name)
          - name: image-tag
            value: $(tasks.setup.results.image-tag)
          - name: registry-location
            value: $(tasks.setup.results.registry-location)
          - name: registry-namespace
            value: $(tasks.setup.results.registry-namespace)
          - name: app-namespace
            value: $(tasks.setup.results.app-namespace)
          - name: app-name
            value: $(params.app-name)
          - name: tools-image
            value: $(tasks.setup.results.tools-image)
          - name: api-server
            value: $(tasks.setup.results.api-server)
          - name: private-lan-id
            value: $(params.private-lan-id)
          - name: private-ip
            value: $(params.private-ip)
          - name: configurations
            value: $(params.configurations)
          - name: min-cpu
            value: $(params.min-cpu)
          - name: max-cpu
            value: $(params.max-cpu)
          - name: min-memory
            value: $(params.min-memory)
          - name: max-memory
            value: $(params.max-memory)
          - name: worker-node
            value: $(params.worker-node)
          - name: replicas
            value: $(params.replicas)
        runAfter:
          - build
        taskRef:
          kind: Task
          name: ace-deploy
  startTime: '2021-04-19T22:18:17Z'
  taskRuns:
    ace-pipelinerun-j9pct-build-585bj:
      pipelineTaskName: build
      status:
        completionTime: '2021-04-19T22:19:54Z'
        conditions:
          - lastTransitionTime: '2021-04-19T22:19:54Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: ace-pipelinerun-j9pct-build-585bj-pod-prdld
        startTime: '2021-04-19T22:18:26Z'
        steps:
          - container: step-git-clone
            imageID: >-
              quay.io/ibmgaragecloud/ibmcloud-dev@sha256:a3a486b8ac5c99b9dad1ae3da35d3dcb4197274d9807ee896e2ea75349252bea
            name: git-clone
            terminated:
              containerID: >-
                cri-o://de663ef26f1c130cf8aa64a81f22ceedea2aa184338f09d512b800a36943be0e
              exitCode: 0
              finishedAt: '2021-04-19T22:18:32Z'
              reason: Completed
              startedAt: '2021-04-19T22:18:32Z'
          - container: step-build
            imageID: >-
              quay.io/buildah/stable@sha256:04803d2144a2df5bf3aa2875f130e2b6cfc6ee45003125dc4df13f05f0898f9a
            name: build
            terminated:
              containerID: >-
                cri-o://3d5c310e8352e9d9b6125f3f2b09cef6b72ad59b3a45aff211907d3dc51eb164
              exitCode: 0
              finishedAt: '2021-04-19T22:19:54Z'
              reason: Completed
              startedAt: '2021-04-19T22:18:33Z'
        taskSpec:
          params:
            - name: git-url
              type: string
            - default: master
              name: git-revision
              type: string
            - name: source-dir
              type: string
            - name: image-name
              type: string
            - name: image-tag
              type: string
            - name: registry-location
              type: string
            - name: registry-namespace
              type: string
            - name: tools-image
              type: string
            - name: master-image
              type: string
            - default: 'quay.io/buildah/stable:v1.15.0'
              name: BUILDER_IMAGE
              type: string
            - default: ./Dockerfile
              name: DOCKERFILE
              type: string
            - default: .
              name: CONTEXT
              type: string
            - default: 'false'
              name: TLSVERIFY
              type: string
            - default: docker
              name: FORMAT
              type: string
            - default: overlay
              name: STORAGE_DRIVER
              type: string
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: ibm-git-credentials
                      optional: true
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: ibm-git-credentials
                      optional: true
              image: $(params.tools-image)
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    set -x
                    git clone $(params.git-url) $(params.source-dir)
                fi

                set -x

                cd $(params.source-dir)

                git checkout master      
            - env:
                - name: REGISTRY_USER
                  valueFrom:
                    secretKeyRef:
                      key: REGISTRY_USER
                      name: ibm-registry-access
                      optional: false
                - name: REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: REGISTRY_PASSWORD
                      name: ibm-registry-access
                      optional: false
              image: $(params.BUILDER_IMAGE)
              name: build
              resources: {}
              script: >
                set +x

                APP_IMAGE="$(params.registry-namespace)/$(params.image-name):$(params.image-tag)"

                LATEST="$(params.registry-namespace)/$(params.image-name):latest"

                MASTER_IMAGE=`echo $(params.master-image) | sed 's/ *$//g'` 


                echo "Building image [${APP_IMAGE}]"


                echo "buildah login -u \"${REGISTRY_USER}\" -p \"xxxxx\"
                \"$(params.registry-location)\""

                buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}"
                "$(params.registry-location)"


                echo "buildah --layers --storage-driver=$(params.STORAGE_DRIVER)
                bud --pull-always --format=$(params.FORMAT)
                --tls-verify=$(params.TLSVERIFY) -f $(params.DOCKERFILE) -t
                ${APP_IMAGE} $(params.CONTEXT)"

                buildah --layers --storage-driver=$(params.STORAGE_DRIVER) bud
                --pull-always --format=$(params.FORMAT)
                --tls-verify=$(params.TLSVERIFY) -f $(params.DOCKERFILE) -t
                ${APP_IMAGE} $(params.CONTEXT)


                echo "buildah --storage-driver=$(params.STORAGE_DRIVER) push
                --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest
                ${APP_IMAGE} docker://${APP_IMAGE}"

                buildah --storage-driver=$(params.STORAGE_DRIVER) push
                --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest
                ${APP_IMAGE} docker://${APP_IMAGE}      


                if [[ ${MASTER_IMAGE} == "true" ]];

                then
                   echo "buildah --storage-driver=$(params.STORAGE_DRIVER) tag ${APP_IMAGE} ${LATEST}"
                   buildah --storage-driver=$(params.STORAGE_DRIVER) tag ${APP_IMAGE} ${LATEST}

                   echo "buildah --storage-driver=$(params.STORAGE_DRIVER) push ${LATEST}"
                   buildah --storage-driver=$(params.STORAGE_DRIVER) push --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest ${LATEST}
                fi
              securityContext:
                privileged: true
              volumeMounts:
                - mountPath: /var/lib/containers
                  name: varlibcontainers
              workingDir: $(params.source-dir)
          volumes:
            - emptyDir: {}
              name: varlibcontainers
            - emptyDir: {}
              name: source
    ace-pipelinerun-j9pct-deploy-w2m84:
      pipelineTaskName: deploy
      status:
        completionTime: '2021-04-19T22:20:43Z'
        conditions:
          - lastTransitionTime: '2021-04-19T22:20:43Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: ace-pipelinerun-j9pct-deploy-w2m84-pod-fd7s6
        startTime: '2021-04-19T22:19:55Z'
        steps:
          - container: step-git-clone
            imageID: >-
              quay.io/ibmgaragecloud/ibmcloud-dev@sha256:a3a486b8ac5c99b9dad1ae3da35d3dcb4197274d9807ee896e2ea75349252bea
            name: git-clone
            terminated:
              containerID: >-
                cri-o://46b0e8b29c0bb44f8d542749820648337e3eed5b818ad38bdd08760b91f65a85
              exitCode: 0
              finishedAt: '2021-04-19T22:20:03Z'
              reason: Completed
              startedAt: '2021-04-19T22:20:02Z'
          - container: step-json
            imageID: >-
              quay.io/ibmgaragecloud/ibmcloud-dev@sha256:a3a486b8ac5c99b9dad1ae3da35d3dcb4197274d9807ee896e2ea75349252bea
            name: json
            terminated:
              containerID: >-
                cri-o://d659a8d1023e9a660325281d3424335d8ae77d175f62533eaa4bd61a4538b48c
              exitCode: 0
              finishedAt: '2021-04-19T22:20:03Z'
              reason: Completed
              startedAt: '2021-04-19T22:20:03Z'
          - container: step-deploy
            imageID: >-
              quay.io/ibmgaragecloud/ibmcloud-dev@sha256:a3a486b8ac5c99b9dad1ae3da35d3dcb4197274d9807ee896e2ea75349252bea
            name: deploy
            terminated:
              containerID: >-
                cri-o://465502de3da396e90e9b267a0c617a0043a900fb104028a2a11c2802b178dd20
              exitCode: 0
              finishedAt: '2021-04-19T22:20:42Z'
              reason: Completed
              startedAt: '2021-04-19T22:20:04Z'
        taskSpec:
          params:
            - name: git-url
              type: string
            - name: git-revision
              type: string
            - name: source-dir
              type: string
            - name: image-name
              type: string
            - name: image-tag
              type: string
            - name: registry-location
              type: string
            - name: registry-namespace
              type: string
            - name: app-namespace
              type: string
            - name: app-name
              type: string
            - name: tools-image
              type: string
            - name: api-server
              type: string
            - name: private-lan-id
              type: string
            - name: private-ip
              type: string
            - name: configurations
              type: string
            - name: min-memory
              type: string
            - name: max-memory
              type: string
            - name: min-cpu
              type: string
            - name: max-cpu
              type: string
            - name: worker-node
              type: string
            - name: replicas
              type: string
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: ibm-git-credentials
                      optional: true
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: ibm-git-credentials
                      optional: true
              image: $(params.tools-image)
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    set -x
                    git clone $(params.git-url) $(params.source-dir)
                fi

                set -x

                cd $(params.source-dir)

                git checkout master
            - image: $(params.tools-image)
              name: json
              resources: {}
              script: |
                #!/usr/bin/env bash
                cat > $(params.source-dir)/deploy.json <<- EOM
                {
                  "apiVersion": "appconnect.ibm.com/v1beta1",
                  "kind": "IntegrationServer",
                  "metadata": {
                    "name": "name",
                    "namespace": "namespace"
                  },
                  "spec": {
                    "disableRoutes" : true,
                    "adminServerSecure" : false,
                    "barURL": "",
                    "configurations": [],
                    "designerFlowsOperationMode": "disabled",
                    "license": {
                      "accept": true,
                      "license": "L-APEH-BSVCHU",
                      "use": "AppConnectEnterpriseProduction"
                    },
                    "pod": {
                      "containers": {
                        "runtime": { 
                          "livenessProbe" : { "initialDelaySeconds": 1200 },
                          "image": "image",
                          "imagePullPolicy": "IfNotPresent",
                          "resources": {
                            "limits": { "cpu": "500m", "memory": "512Mi" },
                            "requests": { "cpu": "250m", "memory": "250Mi" }
                          }
                        }
                      }
                    },
                    "replicas": 1,
                    "router": { "timeout": "120s" },
                    "service": 
                    { 
                      "endpointType": "https",
                      "ports": [
                        {
                            "name": "debug",
                            "port": 9175,
                            "protocol": "TCP",
                            "targetPort": 9175
                        }
                      ]
                    },
                    "tracing": { "enabled": false },
                    "useCommonServices": false,
                    "version": "11.0.0.11-r1"
                  }
                }
                EOM
            - env:
                - name: OPENSHIFT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: OPENSHIFT_PASSWORD
                      name: openshift-access
                      optional: false
                - name: OPENSHIFT_USER
                  valueFrom:
                    secretKeyRef:
                      key: OPENSHIFT_USER
                      name: openshift-access
                      optional: false
              image: $(params.tools-image)
              name: deploy
              resources: {}
              script: >
                #!/usr/bin/env bash


                echo "$(date): $0 starting..."


                PIPELINE_IMAGE_URL="$(params.registry-namespace)/$(params.image-name):$(params.image-tag)"

                PROJECT_NAME=$(params.image-name)

                #remove blanks

                NAMESPACE=`echo $(params.app-namespace) | sed 's/ *$//g'`

                REPLICAS=`echo $(params.replicas) | sed 's/ *$//g'`

                API_SERVER=`echo $(params.api-server) | sed 's/ *$//g'`

                PRIVATE_VLAN=`echo $(params.private-lan-id) | sed 's/ *$//g'`

                PRIVATE_IP=`echo $(params.private-ip) | sed 's/ *$//g'`

                CONFIGURATIONS=`echo $(params.configurations) | sed 's/ *$//g'` 

                MIN_CPU=`echo $(params.min-cpu) | sed 's/ *$//g'` 

                MAX_CPU=`echo $(params.max-cpu) | sed 's/ *$//g'` 

                MIN_MEMORY=`echo $(params.min-memory) | sed 's/ *$//g'` 

                MAX_MEMORY=`echo $(params.max-memory) | sed 's/ *$//g'` 

                WORKER_NODE=`echo $(params.worker-node) | sed 's/ *$//g'` 

                APP_NAME=`echo $(params.app-name) | sed 's/ *$//g'` 


                env


                echo "$(date):oc login ${API_SERVER} -u ${OPENSHIFT_USER} -p
                <redacted>"


                if ! oc login ${API_SERVER} --insecure-skip-tls-verify -u
                ${OPENSHIFT_USER} -p ${OPENSHIFT_PASSWORD};

                then
                   exit 1
                fi



                if [[ -n ${CONFIGURATIONS} ]];

                then
                  IFS=',' read -r -a configs <<< "$CONFIGURATIONS"
                  for config in "${!configs[@]}"
                  do
                     count=$(($config+1))

                     if [[ $config == 0 ]];
                     then
                        cat $(params.source-dir)/deploy.json | jq '.spec.configurations += ["'${configs[config]}'"]' > deploy${count}.json
                     else
                        cat deploy${config}.json | jq '.spec.configurations += ["'${configs[config]}'"]' > deploy${count}.json
                     fi

                     cp deploy${count}.json deploy-with-configs.json
                  done

                  cp deploy-with-configs.json deploy1.json 
                else
                  cp $(params.source-dir)/deploy.json deploy1.json
                fi


                cat deploy1.json | jq
                '.spec.pod.containers.runtime.resources.limits.cpu="'${MAX_CPU}'"'
                > deploy2.json

                cat deploy2.json | jq
                '.spec.pod.containers.runtime.resources.limits.memory="'${MAX_MEMORY}'"'
                > deploy3.json

                cat deploy3.json | jq
                '.spec.pod.containers.runtime.resources.requests.cpu="'${MIN_CPU}'"'
                > deploy4.json

                cat deploy4.json | jq
                '.spec.pod.containers.runtime.resources.requests.memory="'${MIN_MEMORY}'"'
                > deploy5.json


                if [[ -n ${WORKER_NODE} ]];

                then
                      cat deploy5.json | jq '.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions += [{"key":"workernode","operator":"In", "values":["'${WORKER_NODE}'"]}]' > deploy6.json
                else
                      cp  deploy5.json deploy6.json
                fi


                cat deploy6.json |  jq '.metadata.name =
                "'${NAMESPACE}'-'${APP_NAME}'" | .metadata.namespace =
                "'${NAMESPACE}'" |
                .spec.pod.containers.runtime.image="'${PIPELINE_IMAGE_URL}'" |
                .spec.replicas='${REPLICAS}'' > deployment.json


                echo "$(date):editted json"

                cat deployment.json  


                echo "$(date): DRY RUN..."

                echo "$(date): oc apply -f deployment.json --dry-run=client -o
                yaml"

                oc apply -f deployment.json --dry-run=client -o yaml


                echo "$(date): DEPLOYING..."

                echo "$(date): oc apply -f deployment.json"

                oc apply -f deployment.json


                echo "$(date): Waiting for deploy to take"

                sleep 30s

                echo "$(date): Done waiting for deploy to take"


                DEPLOYMENT_NAME=henda-hello-world-is

                set -x

                if oc rollout status deploy/${DEPLOYMENT_NAME} --watch=true
                --request-timeout="1200s" --namespace ${NAMESPACE}; then
                  STATUS="pass"
                else
                  STATUS="fail"
                fi

                set +x


                if [ "$STATUS" == "fail" ]; then
                  echo "$(date): DEPLOYMENT FAILED"
                  exit 1
                else
                  echo "$(date): Getting deployment"        
                  oc -n ${NAMESPACE} get deployment ${DEPLOYMENT_NAME} -o json >deployed.json

                  if [[ $(cat deployed.json|grep varlog|wc -l) -eq 0 ]];
                  then
                     echo "$(date): No varlog mount/claim found in deployment" 
                     
                     echo "$(date): Enabling metrics and setting log4j volume and claim"
                     cat deployed.json | jq '.spec.template.spec.containers[0].volumeMounts += [{"mountPath": "/home/aceuser/ace-server/log4j/logs", "name": "varlog"}]' >deployed-1.json
                     cat deployed-1.json | jq '.spec.template.spec.volumes += [{"name": "varlog", "persistentVolumeClaim": { "claimName": "logs-log4j"} }]' >deployed.json
                     cat deployed.json | jq '.spec.template.spec.containers[0].env[1].value="true"' >deployed-1.json
                     mv deploy-1.json deploy.json
                     
                     echo "$(date): Re-applying the deployment"

                     oc replace --force --wait=true -n ${NAMESPACE} -f deploy.json

                     echo "$(date): Deployed json is as follows:"

                     oc -n ${NAMESPACE} get deployment ${DEPLOYMENT_NAME} -o json >deployed.json

                     cat deployed.json 

                     echo "$(date): DEPLOYMENT COMPLETED - Check Pod is running in namespace ${NAMESPACE}"
                  else
                     echo "$(date): No re-deploy required - volume mount and claim found - Check Pod is running in namespace ${NAMESPACE}"
                  fi

                  set -x
                  if oc rollout status deploy/${DEPLOYMENT_NAME} --watch=true --request-timeout="1200s" --namespace ${NAMESPACE}; 
                  then
                    STATUS="pass"
                  else
                    STATUS="fail"
                  fi
                  set +x
                  
                  if [ "$STATUS" == "fail" ]; 
                  then
                    echo "$(date): Replace of deployment failed"
                    exit 1
                  else
                    if [[ -n ${PRIVATE_VLAN} ]]; then
                      echo "$(date): Adding private service"
                      oc -n ${NAMESPACE} get service ${DEPLOYMENT_NAME} -o json > service.json
                      cat service.json | jq 'del(.spec.clusterIP) | del(.metadata.managedFields) | del(.metadata.creationTimestamp) | del(.metadata.ownerReferences) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid) | .spec.type="LoadBalancer" | .spec.externalTrafficPolicy="Local" | .metadata.annotations."service.kubernetes.io/ibm-load-balancer-cloud-provider-enable-features"="ipvs" | .metadata.annotations."service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type"="private" | .metadata.annotations."service.kubernetes.io/ibm-load-balancer-cloud-provider-vlan"= "'${PRIVATE_VLAN}'" | .metadata.name=(.metadata.name+"-private")' > private-service.json

                      if [[ -n ${PRIVATE_IP} ]]; 
                      then
                        cat private-service.json | jq '.spec.loadBalancerIP="'${PRIVATE_IP}'"' > private-service-2.json
                      else
                        cp private-service.json private-service-2.json
                      fi

                      cat private-service-2.json
                      oc apply -f private-service-2.json
                    fi
                  fi
                fi
              workingDir: $(params.source-dir)
          volumes:
            - emptyDir: {}
              name: source
    ace-pipelinerun-j9pct-setup-n42s7:
      pipelineTaskName: setup
      status:
        completionTime: '2021-04-19T22:18:26Z'
        conditions:
          - lastTransitionTime: '2021-04-19T22:18:26Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: ace-pipelinerun-j9pct-setup-n42s7-pod-jjd9x
        startTime: '2021-04-19T22:18:18Z'
        steps:
          - container: step-git-clone
            imageID: >-
              quay.io/ibmgaragecloud/ibmcloud-dev@sha256:a3a486b8ac5c99b9dad1ae3da35d3dcb4197274d9807ee896e2ea75349252bea
            name: git-clone
            terminated:
              containerID: >-
                cri-o://62c96308adeb7c3f1a55c7302630f4105c68c826ade0d567bb3a4cdb93d58822
              exitCode: 0
              finishedAt: '2021-04-19T22:18:25Z'
              message: >-
                [{"key":"api-server","value":"https://c113-e.eu-de.containers.cloud.ibm.com:31536\n","resourceRef":{},"type":"TaskRunResult"},{"key":"app-namespace","value":"henda","resourceRef":{},"type":"TaskRunResult"},{"key":"git-revision","value":"d7a56b185ac1e380a94b43cc6bff1d765061010b","resourceRef":{},"type":"TaskRunResult"},{"key":"git-url","value":"https://github.com/hindos/ACE.git","resourceRef":{},"type":"TaskRunResult"},{"key":"image-name","value":"ace","resourceRef":{},"type":"TaskRunResult"},{"key":"image-tag","value":"d7a56b1","resourceRef":{},"type":"TaskRunResult"},{"key":"registry-location","value":"docker.io","resourceRef":{},"type":"TaskRunResult"},{"key":"registry-namespace","value":"hindos","resourceRef":{},"type":"TaskRunResult"},{"key":"source-dir","value":"/source","resourceRef":{},"type":"TaskRunResult"},{"key":"tools-image","value":"quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4","resourceRef":{},"type":"TaskRunResult"}]
              reason: Completed
              startedAt: '2021-04-19T22:18:24Z'
        taskResults:
          - name: api-server
            value: |
              https://c113-e.eu-de.containers.cloud.ibm.com:31536
          - name: app-namespace
            value: henda
          - name: git-revision
            value: d7a56b185ac1e380a94b43cc6bff1d765061010b
          - name: git-url
            value: 'https://github.com/hindos/ACE.git'
          - name: image-name
            value: ace
          - name: image-tag
            value: d7a56b1
          - name: registry-location
            value: docker.io
          - name: registry-namespace
            value: hindos
          - name: source-dir
            value: /source
          - name: tools-image
            value: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
        taskSpec:
          params:
            - name: environment
              type: string
            - name: git-url
              type: string
            - name: app-namespace
              type: string
            - default: master
              name: git-revision
              type: string
            - default: /source
              name: source-dir
              type: string
            - default: ''
              name: image-name
              type: string
            - default: ''
              name: image-tag
              type: string
            - default: docker.io
              name: registry-location
              type: string
            - default: hindos
              name: registry-namespace
              type: string
            - default: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
              name: tools-image
              type: string
          results:
            - description: ''
              name: api-server
            - description: ''
              name: git-url
            - description: ''
              name: git-revision
            - description: ''
              name: source-dir
            - description: ''
              name: app-namespace
            - description: ''
              name: image-name
            - description: ''
              name: image-tag
            - description: ''
              name: tools-image
            - description: ''
              name: registry-location
            - description: ''
              name: registry-namespace
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: $(params.source-dir)
                name: source
          steps:
            - env:
                - name: ENVIRONMENTS
                  valueFrom:
                    configMapKeyRef:
                      key: environments.json
                      name: environments
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: GIT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: ibm-git-credentials
                      optional: false
                - name: GIT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: ibm-git-credentials
                      optional: false
              image: $(params.tools-image)
              name: git-clone
              resources: {}
              script: >
                set +x

                if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]];
                then
                    git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
                else
                    git clone $(params.git-url) $(params.source-dir)
                fi

                cd $(params.source-dir)

                git checkout $(params.git-revision)


                # Results

                # Defaults

                echo -n "$(params.git-url)">$(results.git-url.path)

                echo -n "$(git rev-parse --verify
                HEAD)">$(results.git-revision.path)

                echo -n "$(params.source-dir)">$(results.source-dir.path)

                echo -n "$(params.app-namespace)">$(results.app-namespace.path)

                echo -n "$(params.tools-image)">$(results.tools-image.path)

                echo -n
                "$(params.registry-namespace)">$(results.registry-namespace.path)

                echo -n
                "$(params.registry-location)">$(results.registry-location.path)


                # get the API Server

                echo "Finding the API SERVER"


                if [[ -z ${ENVIRONMENTS} ]];

                then
                  echo "No deployment environments found in environments config map!"
                  exit 1
                else
                   echo "${ENVIRONMENTS}"
                   ENV=`echo $(params.environment) | sed 's/ *$//g'` 

                   if [[ ${ENV} == "build-only"]];
                   then
                      echo "Building only, no environment selected."
                   else
                      APISERVER=`echo ${ENVIRONMENTS} | jq -r '."'${ENV}'"'`
                      echo "Will deploy to ${ENV}:${APISERVER}"
                      echo -n ${ENVIRONMENTS} | jq -r '."'${ENV}'"'>$(results.api-server.path)
                   fi
                fi


                # Assume short git commit revision

                REGISTRY_TAG="$(git rev-parse --verify HEAD --short)"

                echo -n "${REGISTRY_TAG}">$(results.image-tag.path)


                if [[ -z "$(params.app-namespace)" ]]; then
                  # Assume current namespace
                  echo -n "${NAMESPACE}">$(results.app-namespace.path)
                fi


                IMAGE_NAME="$(basename $(echo -n $(git config --get
                remote.origin.url)) .git | tr '[:upper:]' '[:lower:]' | sed
                's/_/-/g')"

                echo -n "${IMAGE_NAME}">$(results.image-name.path)


                for f in /tekton/results/*; do echo "results.$(basename
                $f)=$(cat $f)"; done
          volumes:
            - emptyDir: {}
              name: source
